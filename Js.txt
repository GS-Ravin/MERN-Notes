JavaScript is a scripting language for creating dynamic web page content
it is a sychoronous programing language, single - threaded
object-oriented based pogramming language

JavaScript (JS) is a text-based programming language used both on the client-side and server-side that allows you to create dynamic and interactive websites. It is one of the three core technologies of the World Wide Web, alongside HTML and CSS.
JavaScript was first introduced in 1995 by Netscape as LiveScript. It was later renamed JavaScript to avoid confusion with the LiveScript programming language.
JavaScript is a high-level, interpreted language. This means that it is not compiled into machine code before it is executed, but instead it is interpreted by the browser. This makes it faster and easier to write JavaScript code.
JavaScript is a dynamic language. This means that the type of a variable can change at runtime. This can be useful for creating flexible and adaptable code.
JavaScript is an object-oriented language. This means that it uses objects to store data and functionality. Objects are made up of properties and methods.
JavaScript is a powerful and versatile language that can be used to create a wide variety of websites and applications. It is one of the most popular programming languages in the world and is used by millions of developers.


async returns the promise

callback
A JavaScript callback is a function which is to be executed after another function has finished execution. A more formal definition would be - Any function that is passed as an argument to another function so that it can be executed in that other function is called as a callback function
callback q, event loop, callback hell(stack), web api - LIFO.

disadvantage of callback hell : 
Low readability and problem in maintaining code. Difficulty in error handling, debugging and testing. Increased code complexity.


promise :
Promises are used to handle asynchronous operations in JavaScript. Syntax: let promise = new Promise(function(resolve, reject){ //do something }); 
takes only one argument which is a callback function.

promise chain:
Promise Chaining is a simple concept by which we may initialize another promise inside our .then() method and accordingly we may execute our results. The function inside then captures the value returned by the previous promise


promise.all
Promise. all in JavaScript is a built-in functional method that takes in an array of promises as input and returns a single promise only after resolving all the promises of the input array in sequential order


fetch()
The fetch() method in JavaScript is used to request data from a server. The request can be of any type of API that returns the data in JSON or XML. The fetch() method requires one parameter, the URL to request, and returns a promise


async and await
Using await pauses the execution of its surrounding async function until the promise is settled (that is, fulfilled or rejected). When execution resumes, the value of the await expression becomes that of the fulfilled promise

js : 



ES5 VS ES6
1.
introduced in 2009
introduced in 2015
2.
Data types supported: number, string, null, Boolean and undefined.
Data types supported: number, string, null, Boolean, undefined, BigInt and Symbol.
3.
ES5 uses var to declare a variable.
ES6 has an additional feature called let and const for defining a variable.
4.
ES5 uses the Require js module to include a react module or a component.
ES6 uses the import module to include a react module or a component.
5.
ES5 uses the function keyword along with the return keyword to define a function.
In ES6 we donâ€™t need to use a function keyword to define a function. The use of the Arrow function in ES6 makes it more compact
6.
Object manipulation is time-consuming in ES5
Object manipulation is less time-consuming in ES6.



SCOPE OF VAR, LET, CONST
scope of var is functional or global scope - redeclare, reinitalize
scope of let is block level scope - declare, reinitalize
scope of const is block level scope - only once declare, initalize


ARROW FUNCTION
An arrow function expression is a compact alternative to a traditional function expression
don't have their own this keyword, super, arguments.



THIS KEYWORD : 
the this keyword refers to an object. Executing the current peice of code
only in regular function


TEMPLATE LITERALS : 
use back ticks rather than  quotes.
Introduced in ES6, Simple method for performing string interpolation and multiline string operation.



REST OPERATOR : 
Introduced in ES6
It collects several elements. In functions when we require to pass arguments but were not sure how many we have to pass, the rest parameter makes it easier.
A rest parameter allows us to bundle an indefinite number of arguments into an array.
The last parameter in a JavaScript function prefixed by ... is known as the rest parameter.



SPEARD OPEARTOR :
The spread operator helps us expand an iterable such as an array, object. it also helps to expand the object expressions.
Almost deep copy of a top-level of data and shallow copy of nested data.



DESTRUCTURING  : 
Destructuring is the act of unpacking elements in an array or object. Destructuring not only allow us to unpack elements, it also gives you the power to manipulate and switch elements you unpacked depending on the type of operation you want to perform


PROPERTY SHORTHAND
With Shorthand Properties, whenever you have a variable which is the same name as a property on an object, when constructing the object, you can omit the property name
A function that is a property on an object is called a method. With ES6's Shorthand Method Names, you can omit the function keyword completely



CLASS : 
classes are a template for creating objects.
Use the keyword class to create a class.
Always add a method named constructor():

constructor :
It is executed automatically when a new object is created
It is used to initialize object properties

super :
The super keyword is used to call the constructor of its parent class to access the parent's properties and methods


